#!/usr/bin/env node
var config = require('./modules/librato-cli-config');
var client = require('./modules/librato-cli-client');
var program = require('commander');

program
  .option('-c, --composite', 'Only return composite metrics in the results')
  .option('-m, --max [limit]', 'Caps the maximum number of metrics to scan through')
  .parse(process.argv);
var args = program.args;
var maxMetrics = null;

if (program.max) {
  maxMetrics = parseInt(program.max);
}

var getNextPageOfMetrics = function(filter, endPoint, nextOffset, length, metrics) {
  var nextEndPoint = endPoint + '&offset=' + nextOffset + '&length=' + length;

  client.get(nextEndPoint, function (data, response) {
                         var offset = data.query.offset;

                         data.metrics.forEach(function (metric) {
                           if (program.composite && metric.type === "composite") {
                             metrics.push(metric);
                           } else if (!program.composite) {
                             metrics.push(metric);
                           }
                         });

                         var found = data.query.found;
                         if (offset + length < found && (!maxMetrics || offset + length < maxMetrics)) {
                           getNextPageOfMetrics(filter, endPoint, offset + length, length, metrics);
                         } else {
                           console.log(JSON.stringify(metrics, null, 2));
                         }
                       });
};

var listMetrics = function(filter) {
  var endPoint = config.baseUrl + 'v1/metrics?name=' + filter;
  var offset = 0;
  var length = 100;
  var metrics = [];

  client.get(endPoint, function (data, response) {
                         offset = data.query.offset;

                         data.metrics.forEach(function (metric) {
                           if (program.composite && metric.type === "composite") {
                             metrics.push(metric);
                           } else if (!program.composite) {
                             metrics.push(metric);
                           }
                         });

                         var found = data.query.found;
                         if (offset + length < found && (!maxMetrics || offset + length < maxMetrics)) {
                           getNextPageOfMetrics(filter, endPoint, offset + length, length, metrics);
                         } else {
                           console.log(JSON.stringify(metrics, null, 2));
                         }
                       });
};

if (args.length) {
  listMetrics(args[0]);
} else {
  listMetrics('');
}
